format_version: "11"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

workflows:
  test_ndk:
    summary: Test NDK compilation without specifying an NDK version in the step
    envs:
    - SAMPLE_APP_URL: https://github.com/bitrise-io/android-ndk-sample-project.git
    - BRANCH: ndk22-compatible
    - ANDROID_NDK_HOME: ""
    before_run:
    - _setup
    - _backup_ndk_bundle
    steps:
    - script:
        title: Remove ndk
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            rm -rf $ANDROID_HOME/ndk
    after_run:
    - _restore_ndk_bundle

  test_react_native:
    envs:
    - SAMPLE_APP_URL: https://github.com/bitrise-io/Bitrise-React-Native-Sample.git
    - BRANCH: master
    before_run:
    - _setup
    - _backup_ndk_bundle
    after_run:
    - _restore_ndk_bundle
    steps:
    - script:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            yarn
    - path::./:
        title: Execute step
        inputs:
        - ndk_version: 23.1.7779620

  test_ndk_install:
    summary: Test installing multiple NDK revisions and compare installed version numbers to expected values
    envs:
    - SAMPLE_APP_URL: https://github.com/bitrise-io/android-ndk-sample-project.git
    - BRANCH: ndk22-compatible
    before_run:
    - _setup
    - _backup_ndk_bundle
    after_run:
    - _restore_ndk_bundle
    steps:
    - path::./:
        title: Execute step without NDK version
        inputs:
        - ndk_version: ""
    - path::./:
        title: Execute step with NDK r18
        inputs:
        - ndk_version: 18.1.5063045
    - script:
        title: Check installed NDK version
        inputs:
        - content: |-
            EXPECTED_VERSION=18.1.5063045
            NDK_VERSION=`cat $ANDROID_HOME/ndk/18.1.5063045/source.properties | grep Pkg.Revision | cut -d'=' -f2 | cut -d' ' -f2`
            if [ $NDK_VERSION != $EXPECTED_VERSION ]; then
              echo "Unexpected installed NDK version: $NDK_VERSION"
              echo "Expected: $EXPECTED_VERSION"
              exit 1
            else
              echo "NDK version is correct: $NDK_VERSION"
            fi
    - path::./:
        title: Execute step again with NDK r18
        inputs:
        - ndk_version: 18.1.5063045
    - script:
        title: Check installed NDK version
        inputs:
        - content: |-
            EXPECTED_VERSION=18.1.5063045
            NDK_VERSION=`cat $ANDROID_HOME/ndk/18.1.5063045/source.properties | grep Pkg.Revision | cut -d'=' -f2 | cut -d' ' -f2`
            if [ $NDK_VERSION != $EXPECTED_VERSION ]; then
              echo "Unexpected installed NDK version: $NDK_VERSION"
              echo "Expected: $EXPECTED_VERSION"
              exit 1
            else
              echo "NDK version is correct: $NDK_VERSION"
            fi
    - path::./:
        title: Execute step with NDK r17
        inputs:
        - ndk_version: 17.2.4988734
    - script:
        title: Check installed NDK version
        inputs:
        - content: |-
            EXPECTED_VERSION=17.2.4988734
            NDK_VERSION=`cat $ANDROID_HOME/ndk/17.2.4988734/source.properties | grep Pkg.Revision | cut -d'=' -f2 | cut -d' ' -f2`
            if [ $NDK_VERSION != $EXPECTED_VERSION ]; then
              echo "Unexpected installed NDK version: $NDK_VERSION"
              echo "Expected: $EXPECTED_VERSION"
              exit 1
            else
              echo "NDK version is correct: $NDK_VERSION"
            fi
    - path::./:
        title: Execute step with NDK r22
        description: NDK r22 doesn't contain the platforms dir anymore
        inputs:
        - ndk_version: 22.1.7171670
    - script:
        title: Check installed NDK version
        inputs:
        - content: |-
            EXPECTED_VERSION=22.1.7171670
            NDK_VERSION=`cat $ANDROID_HOME/ndk/22.1.7171670/source.properties | grep Pkg.Revision | cut -d'=' -f2 | cut -d' ' -f2`
            if [ $NDK_VERSION != $EXPECTED_VERSION ]; then
              echo "Unexpected installed NDK version: $NDK_VERSION"
              echo "Expected: $EXPECTED_VERSION"
              exit 1
            else
              echo "NDK version is correct: $NDK_VERSION"
            fi
    - path::./:
        title: Execute step with NDK r23
        inputs:
        - ndk_version: 23.1.7779620
    - script:
        title: Check installed NDK version
        inputs:
        - content: |-
            EXPECTED_VERSION=23.1.7779620
            NDK_VERSION=`cat $ANDROID_HOME/ndk/23.1.7779620/source.properties | grep Pkg.Revision | cut -d'=' -f2 | cut -d' ' -f2`
            if [ $NDK_VERSION != $EXPECTED_VERSION ]; then
              echo "Unexpected installed NDK version: $NDK_VERSION"
              echo "Expected: $EXPECTED_VERSION"
              exit 1
            else
              echo "NDK version is correct: $NDK_VERSION"
            fi

  test_build_tools_not_installed:
    envs:
    - SAMPLE_APP_URL: https://github.com/bitrise-io/Bitrise-Android-Sample.git
    - BRANCH: main
    before_run:
    - _setup
    after_run:
    - _restore_build_tools
    steps:
    - script:
        title: Remove preinstalled SDK build-tools
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            mv $ANDROID_HOME/build-tools $ANDROID_HOME/build-tools-original

  _setup:
    steps:
    - script:
        title: Enable JDK 11
        description: This is still needed on the vs4mac stack
        run_if: $.IsCI
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            if [[ "$OSTYPE" == "linux-gnu"* ]]; then
              sudo update-alternatives --set javac /usr/lib/jvm/java-11-openjdk-amd64/bin/javac
              sudo update-alternatives --set java /usr/lib/jvm/java-11-openjdk-amd64/bin/java
              export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
              envman add --key JAVA_HOME --value "/usr/lib/jvm/java-11-openjdk-amd64"
            elif [[ "$OSTYPE" == "darwin"* ]]; then
              jenv global 11
              export JAVA_HOME="$(jenv prefix)"
              envman add --key JAVA_HOME --value "$(jenv prefix)"
            fi
    - script:
        title: Clean _tmp dir
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            rm -rf ./_tmp
    - change-workdir:
        title: Switch working dir to _tmp
        run_if: "true"
        inputs:
        - path: ./_tmp
        - is_create_path: true
    - git::https://github.com/bitrise-steplib/bitrise-step-simple-git-clone.git@master:
        title: Clone sample app
        inputs:
        - repository_url: $SAMPLE_APP_URL
        - clone_into_dir: .
        - branch: $BRANCH

  _restore_build_tools:
    steps:
    - script:
        title: Restore preinstalled SDK build-tools
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            rm -rf $ANDROID_HOME/build-tools
            mv $ANDROID_HOME/build-tools-original $ANDROID_HOME/build-tools

  _backup_ndk_bundle:
    steps:
    - script:
        title: Back up preinstalled ndk
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            cp -R $ANDROID_HOME/ndk $ANDROID_HOME/ndk-original

  _restore_ndk_bundle:
    steps:
    - script:
        title: Restore preinstalled ndk
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            rm -rf $ANDROID_HOME/ndk
            if [ -d $ANDROID_HOME/ndk-original ]; then
              mv $ANDROID_HOME/ndk-original $ANDROID_HOME/ndk
            fi
